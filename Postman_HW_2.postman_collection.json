{
	"info": {
		"_postman_id": "f2d86a21-bf8e-40b2-99d9-6b782c4b789f",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"In body comes the right string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"pm.test(\"Verify respone is string\", function () {\r",
							"    typeof(pm.response) === \"string\" || true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"//var reqdata = request.data\r",
							"//var salary2 = parseInt(reqData.salary)\r",
							"\r",
							"pm.test(\"1.Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"4.Response name == Kolya\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Kolya\");\r",
							"});\r",
							"pm.test(\"5.Response age = 23\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"23\");\r",
							"});\r",
							"pm.test(\"6.Response salary = 1000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request(запрос).\r",
							"var reqData = request.data\r",
							"var salary2 = parseInt(reqData.salary)\r",
							"\r",
							"//8.Проверить, что name в ответе равно name s request(запрос) (name забрать из request.)\r",
							"pm.test(\"8. Request name == response name\", function () {\r",
							"pm.expect(reqData.name).to.eql(jsonData.name);\r",
							"});\r",
							"//9.Проверить, что age в ответе равно age s request(запрос) (age забрать из request)\r",
							"pm.test(\"9. Request age == response age\", function () {\r",
							"pm.expect(reqData.name).to.eql(jsonData.name);\r",
							"});\r",
							"//10.Проверить, что salary в ответе равно salary s request(запроса) (salary забрать из request.)\r",
							"pm.test(\"10. Request salary == response salary\", function () {\r",
							"pm.expect(salary2).to.eql(jsonData.salary);\r",
							"});\r",
							"//11.Вывести в консоль параметр family из response(ответа).\r",
							"console.log (jsonData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"12. u_salary_1_5_year == request salary*4\", function () {\r",
							" // console.log (jsonData.family.u_salary_1_5_year);\r",
							" // console.log (reqdata.salary);\r",
							"  pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kolya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//2. Статус код 200\r",
							"pm.test(\"2.Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"5. Url name == response name\", function () {\r",
							"var name = pm.request.url.query.get('name');\r",
							"console.log(name)\r",
							"pm.expect(name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"6. Url age == response age\",function(){\r",
							"    var age = pm.request.url.query.get('age');\r",
							"    pm.expect(age).to.eql(jsonData.age)\r",
							"});\r",
							"\r",
							"pm.test(\"7. Url salary == response salary\", function(){\r",
							"    var url_salary = Number(pm.request.url.query.get('salary'));\r",
							" //   console.log(Number(pm.request.url.query.get('salary')))\r",
							" //   console.log(jsonData.salary)\r",
							"    pm.expect(url_salary).to.eql(jsonData.salary)\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log (jsonData.family)\r",
							"\r",
							"//9.Проверить, что у параметра dog есть параметр name\r",
							"pm.test(\"The parameter dog has parameter name\",() => {\r",
							"  pm.expect(true).to.eql(jsonData.family.pets.dog.hasOwnProperty(\"name\"));\r",
							"});\r",
							"\r",
							"//10.Проверить, что у параметра dog есть параметр age\r",
							"pm.test(\"The parameter dog has parameter age\",() => {\r",
							"  pm.expect(true).to.eql(jsonData.family.pets.dog.hasOwnProperty(\"age\"));\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"The parameter name has parameter Lucky\",() => {\r",
							"  pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"The parameter name has parameter Lucky\",() => {\r",
							"  pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kolya&age=23&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kolya"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.\r",
							"var jsonDataRes = pm.response.json();\r",
							"\r",
							"pm.test(\"2.Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//4. Спарсить request.\r",
							"var jsonDataReq = {};\r",
							"pm.request.url.query.all().forEach((param) => { jsonDataReq[param.key] = param.value});\r",
							"//console.log(jsonDataReq)\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"5. Request name == response name\", function () {\r",
							"//console.log(jsonDataReq.name)\r",
							"//console.log(jsonDataRes.name)    \r",
							"pm.expect(jsonDataReq.name).to.eql(jsonDataRes.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"5. Request age == response age\", function () {\r",
							"//console.log(jsonDataReq.age)\r",
							"//console.log(jsonDataRes.age)\r",
							"pm.expect(parseInt(jsonDataReq.age)).to.eql(jsonDataRes.age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(jsonDataReq.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonDataRes.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonDataRes.salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonDataRes.salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonDataRes.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"6. Url salary == response salary[0]\",function(){\r",
							"//  console.log(jsonDataReq.salary)\r",
							"    pm.expect(parseInt(jsonDataReq.salary)).to.eql(jsonDataRes.salary[0])\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"13. Url salary*2 == response salary[1]\",function(){\r",
							" // console.log(parseInt(jsonDataReq.salary*2))\r",
							" // console.log(parseInt(jsonDataRes.salary[1]))\r",
							"    pm.expect(parseInt(jsonDataReq.salary*2)).to.eql(parseInt(jsonDataRes.salary[1]))\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"13. Url salary*2 == response salary[2]\", function(){\r",
							" // console.log(parseInt(jsonDataReq.salary*2))\r",
							" // console.log(parseInt(jsonDataRes.salary[1]))\r",
							"    pm.expect(parseInt(jsonDataReq.salary*3)).to.eql(parseInt(jsonDataRes.salary[2]))\r",
							"});\r",
							"//15. Создать в окружении переменную name и 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonDataReq.name);\r",
							"//16. Создать в окружении переменную age и 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonDataReq.age);\r",
							"//17. Создать в окружении переменную salary и 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonDataReq.salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var key in jsonDataRes.salary) {\r",
							"    console.log(\"Element: \" + key + \" - Salary: \" + jsonDataRes.salary[key])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kolya&age=23&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kolya"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}